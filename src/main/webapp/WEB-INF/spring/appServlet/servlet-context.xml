<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p=" http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
    <context:property-placeholder location="classpath*:*.properties"/>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources -->
     

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->

	<view-controller path="/uncaughtException" view-name="uncaughtException"/>
	<view-controller path="/resourceNotFound" view-name="resourceNotFound"/>
<!-- 	<view-controller path="/dataAccessFailure" view-name="dataAccessFailure"/> -->
	<view-controller path="/test" view-name="test"/>
	<view-controller path="/buju" view-name="buju"/>
	<view-controller path="/user_quanxian" view-name="user_quanxian_query"/>
	<view-controller path="/huodong" view-name="huodong"/>
	<view-controller path="/createhuodong" view-name="createhuodong"/>
	
	
	<!-- This bean resolves specific types of exceptions to corresponding logical - view names for error views. 
	     The default behaviour of DispatcherServlet - is to propagate all exceptions to the servlet container: 
	     this will happen - here with all other types of exceptions. -->
	<beans:bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" p:defaultErrorView="uncaughtException">
		<beans:property name="exceptionMappings">
			<beans:props>
<!-- 				<beans:prop key=".DataAccessException">dataAccessFailure</beans:prop> -->
				<beans:prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</beans:prop>
				<beans:prop key=".TypeMismatchException">resourceNotFound</beans:prop>
				<beans:prop key=".MissingServletRequestParameterException">resourceNotFound</beans:prop>
			</beans:props>
		</beans:property>
	</beans:bean>

	
	
	<beans:bean class="org.springframework.web.servlet.view.UrlBasedViewResolver" id="tilesViewResolver">
	    <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
	</beans:bean>
	<beans:bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer" id="tilesConfigurer">
	    <beans:property name="definitions">
	      <beans:list>
	        <beans:value>/WEB-INF/layouts/layouts.xml</beans:value>
	        <!-- Scan views directory for Tiles configurations -->
	      <beans:value>/WEB-INF/views/**/views.xml</beans:value>
	    </beans:list>
	  </beans:property>
	</beans:bean>
	
	<context:component-scan base-package="com.ruyicai.newscenter" />
</beans:beans>
